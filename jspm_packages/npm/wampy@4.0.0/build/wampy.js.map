{"version":3,"sources":["../src/wampy.js"],"names":[],"mappings":"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","file":"wampy.js","sourcesContent":["/**\n * Project: wampy.js\n *\n * https://github.com/KSDaemon/wampy.js\n *\n * A lightweight client-side implementation of\n * WAMP (The WebSocket Application Messaging Protocol v2)\n * http://wamp.ws\n *\n * Provides asynchronous RPC/PubSub over WebSocket.\n *\n * Copyright 2014 KSDaemon. Licensed under the MIT License.\n * See @license text at http://www.opensource.org/licenses/mit-license.php\n *\n */\n\n'use strict';\n\n// Module boilerplate to support browser globals and browserify and AMD.\n(function (root, m) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['exports'], m);\n    } else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {\n        // CommonJS\n        module.exports = m();\n    } else {\n        // Browser globals\n        root.Wampy = m();\n    }\n}(this, function () {\n\n    const WAMP_MSG_SPEC = {\n            HELLO: 1,\n            WELCOME: 2,\n            ABORT: 3,\n            CHALLENGE: 4,\n            AUTHENTICATE: 5,\n            GOODBYE: 6,\n            ERROR: 8,\n            PUBLISH: 16,\n            PUBLISHED: 17,\n            SUBSCRIBE: 32,\n            SUBSCRIBED: 33,\n            UNSUBSCRIBE: 34,\n            UNSUBSCRIBED: 35,\n            EVENT: 36,\n            CALL: 48,\n            CANCEL: 49,\n            RESULT: 50,\n            REGISTER: 64,\n            REGISTERED: 65,\n            UNREGISTER: 66,\n            UNREGISTERED: 67,\n            INVOCATION: 68,\n            INTERRUPT: 69,\n            YIELD: 70\n        },\n\n        WAMP_ERROR_MSG = {\n            SUCCESS: {\n                code: 0,\n                description: 'Success!'\n            },\n            URI_ERROR: {\n                code: 1,\n                description: 'Topic URI doesn\\'t meet requirements!'\n            },\n            NO_BROKER: {\n                code: 2,\n                description: 'Server doesn\\'t provide broker role!'\n            },\n            NO_CALLBACK_SPEC: {\n                code: 3,\n                description: 'No required callback function specified!'\n            },\n            INVALID_PARAM: {\n                code: 4,\n                description: 'Invalid parameter(s) specified!'\n            },\n            NON_EXIST_UNSUBSCRIBE: {\n                code: 7,\n                description: 'Trying to unsubscribe from non existent subscription!'\n            },\n            NO_DEALER: {\n                code: 12,\n                description: 'Server doesn\\'t provide dealer role!'\n            },\n            RPC_ALREADY_REGISTERED: {\n                code: 15,\n                description: 'RPC already registered!'\n            },\n            NON_EXIST_RPC_UNREG: {\n                code: 17,\n                description: 'Received rpc unregistration for non existent rpc!'\n            },\n            NON_EXIST_RPC_INVOCATION: {\n                code: 19,\n                description: 'Received invocation for non existent rpc!'\n            },\n            NON_EXIST_RPC_REQ_ID: {\n                code: 20,\n                description: 'No RPC calls in action with specified request ID!'\n            },\n            NO_REALM: {\n                code: 21,\n                description: 'No realm specified!'\n            },\n            NO_WS_OR_URL: {\n                code: 22,\n                description: 'No websocket provided or URL specified is incorrect!'\n            },\n            NO_CRA_CB_OR_ID: {\n                code: 23,\n                description: 'No onChallenge callback or authid was provided for authentication!'\n            },\n            CRA_EXCEPTION: {\n                code: 24,\n                description: 'Exception raised during CRA challenge processing'\n            }\n        },\n\n        isNode = (typeof process === 'object' && Object.prototype.toString.call(process) === '[object process]');\n\n    function getServerUrlBrowser (url) {\n        let scheme, port;\n\n        if (!url) {\n            scheme = window.location.protocol === 'https:' ? 'wss://' : 'ws://';\n            port = window.location.port !== '' ? ':' + window.location.port : '';\n            return scheme + window.location.hostname + port + '/ws';\n        } else if (/^ws(s)?:\\/\\//.test(url)) {   // ws scheme is specified\n            return url;\n        } else if (/:\\d{1,5}/.test(url)) {  // no scheme, but port is specified\n            scheme = window.location.protocol === 'https:' ? 'wss://' : 'ws://';\n            return scheme + url;\n        } else if (url[0] === '/') {    // just path on current server\n            scheme = window.location.protocol === 'https:' ? 'wss://' : 'ws://';\n            port = window.location.port !== '' ? ':' + window.location.port : '';\n            return scheme + window.location.hostname + port + url;\n        } else {    // domain\n            scheme = window.location.protocol === 'https:' ? 'wss://' : 'ws://';\n            return scheme + url;\n        }\n    }\n\n    function getServerUrlNode (url) {\n        if (/^ws(s)?:\\/\\//.test(url)) {   // ws scheme is specified\n            return url;\n        } else {\n            return null;\n        }\n    }\n\n    function getWebSocket (url, protocols, ws) {\n        let parsedUrl = isNode ? getServerUrlNode(url) : getServerUrlBrowser(url);\n\n        if (!parsedUrl) {\n            return null;\n        }\n\n        if (ws) {   // User provided webSocket class\n            return new ws(parsedUrl, protocols);\n        } else if (isNode) {    // we're in node, but no webSocket provided\n            return null;\n        } else {    // we're in browser\n            if ('WebSocket' in window) {\n                // Chrome, MSIE, newer Firefox\n                return new window.WebSocket(parsedUrl, protocols);\n            } else if ('MozWebSocket' in window) {\n                // older versions of Firefox\n                return new window.MozWebSocket(parsedUrl, protocols);\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * WAMP Client Class\n     */\n    class Wampy {\n\n        /**\n         * Wampy constructor\n         * @param {string} url\n         * @param {Object} options\n         */\n        constructor (url, options) {\n\n            /**\n             * Wampy version\n             * @type {string}\n             * @private\n             */\n            this.version = 'v4.0.0';\n\n            /**\n             * WS Url\n             * @type {string}\n             * @private\n             */\n            this._url = (typeof url === 'string') ? url : null;\n\n            /**\n             * WS protocols\n             * @type {Array}\n             * @private\n             */\n            this._protocols = ['wamp.2.json'];\n\n            /**\n             * Supported authentication methods\n             * @type {array}\n             */\n            this._authmethods = ['wampcra'];\n\n            /**\n             * WAMP features, supported by Wampy\n             * @type {object}\n             * @private\n             */\n            this._wamp_features = {\n                agent: 'Wampy.js ' + this.version,\n                roles: {\n                    publisher: {\n                        features: {\n                            subscriber_blackwhite_listing: true,\n                            publisher_exclusion: true,\n                            publisher_identification: true\n                        }\n                    },\n                    subscriber: {},\n                    caller: {\n                        features: {\n                            caller_identification: true,\n                            progressive_call_results: true,\n                            call_canceling: true,\n                            call_timeout: true\n                        }\n                    },\n                    callee: {\n                        features: {\n                            caller_identification: true\n                        }\n                    }\n                }\n            };\n\n            /**\n             * Internal cache for object lifetime\n             * @type {Object}\n             * @private\n             */\n            this._cache = {\n                /**\n                 * WAMP Session ID\n                 * @type {string}\n                 */\n                sessionId: null,\n\n                /**\n                 * Server WAMP roles and features\n                 */\n                server_wamp_features: { roles: {} },\n\n                /**\n                 * Are we in state of saying goodbye\n                 * @type {boolean}\n                 */\n                isSayingGoodbye: false,\n\n                /**\n                 * Status of last operation\n                 */\n                opStatus: { code: 0, description: 'Success!', reqId: 0 },\n\n                /**\n                 * Timer for reconnection\n                 * @type {null}\n                 */\n                timer: null,\n\n                /**\n                 * Reconnection attempts\n                 * @type {number}\n                 */\n                reconnectingAttempts: 0\n            };\n\n            /**\n             * WebSocket object\n             * @type {Object}\n             * @private\n             */\n            this._ws = null;\n\n            /**\n             * Internal queue for websocket requests, for case of disconnect\n             * @type {Array}\n             * @private\n             */\n            this._wsQueue = [];\n\n            /**\n             * Internal queue for wamp requests\n             * @type {object}\n             * @private\n             */\n            this._requests = {};\n\n            /**\n             * Stored RPC\n             * @type {object}\n             * @private\n             */\n            this._calls = {};\n\n            /**\n             * Stored Pub/Sub\n             * @type {object}\n             * @private\n             */\n            this._subscriptions = {};\n\n            /**\n             * Stored Pub/Sub topics\n             * @type {Array}\n             * @private\n             */\n            this._subsTopics = new Set();\n\n            /**\n             * Stored RPC Registrations\n             * @type {object}\n             * @private\n             */\n            this._rpcRegs = {};\n\n            /**\n             * Stored RPC names\n             * @type {Array}\n             * @private\n             */\n            this._rpcNames = new Set();\n\n            /**\n             * Options hash-table\n             * @type {Object}\n             * @private\n             */\n            this._options = {\n                /**\n                 * Logging\n                 * @type {boolean}\n                 */\n                debug: false,\n\n                /**\n                 * Reconnecting flag\n                 * @type {boolean}\n                 */\n                autoReconnect: true,\n\n                /**\n                 * Reconnecting interval (in ms)\n                 * @type {number}\n                 */\n                reconnectInterval: 2 * 1000,\n\n                /**\n                 * Maximum reconnection retries\n                 * @type {number}\n                 */\n                maxRetries: 25,\n\n                /**\n                 * Message serializer\n                 * @type {string}\n                 */\n                transportEncoding: 'json',\n\n                /**\n                 * WAMP Realm to join\n                 * @type {string}\n                 */\n                realm: null,\n\n                /**\n                 * Custom attributes to send to router on hello\n                 * @type {object}\n                 */\n                helloCustomDetails: null,\n\n                /**\n                 * onChallenge callback\n                 * @type {function}\n                 */\n                onChallenge: null,\n\n                /**\n                 * Authentication id to use in challenge\n                 * @type {string}\n                 */\n                authid: null,\n\n                /**\n                 * onConnect callback\n                 * @type {function}\n                 */\n                onConnect: null,\n\n                /**\n                 * onClose callback\n                 * @type {function}\n                 */\n                onClose: null,\n\n                /**\n                 * onError callback\n                 * @type {function}\n                 */\n                onError: null,\n\n                /**\n                 * onReconnect callback\n                 * @type {function}\n                 */\n                onReconnect: null,\n\n                /**\n                 * onReconnectSuccess callback\n                 * @type {function}\n                 */\n                onReconnectSuccess: null,\n\n                /**\n                 * User provided WebSocket class\n                 * @type {function}\n                 */\n                ws: null,\n\n                /**\n                 * User provided msgpack class\n                 * @type {function}\n                 */\n                msgpackCoder: null\n            };\n\n            switch (arguments.length) {\n                case 1:\n                    if (typeof arguments[0] !== 'string') {\n                        this._options = this._merge(this._options, arguments[0]);\n                    }\n                    break;\n                case 2:\n                    this._options = this._merge(this._options, options);\n                    break;\n            }\n\n            this.connect();\n        }\n\n        /* Internal utils methods */\n        /**\n         * Internal logger\n         * @private\n         */\n        _log () {\n            if (this._options.debug) {\n                console.log(arguments);\n            }\n        }\n\n        /**\n         * Get the new unique request id\n         * @returns {number}\n         * @private\n         */\n        _getReqId () {\n            let reqId;\n\n            do {\n                /* Lua (and cjson) outputs big numbers in scientific notation :(\n                 * Need to find a way of fixing that\n                 * For now, i think it's not a big problem to reduce range.\n                 */\n    //          reqId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);    // 9007199254740992\n                reqId = Math.floor(Math.random() * 100000000000000);\n            } while (reqId in this._requests);\n\n            return reqId;\n        }\n\n        /**\n         * Merge argument objects into one\n         * @returns {Object}\n         * @private\n         */\n        _merge () {\n            let obj = {}, i, l = arguments.length, attr;\n\n            for (i = 0; i < l; i++) {\n                for (attr in arguments[i]) {\n                    obj[attr] = arguments[i][attr];\n                }\n            }\n\n            return obj;\n        }\n\n        /**\n         * Check if value is array\n         * @param obj\n         * @returns {boolean}\n         * @private\n         */\n        _isArray (obj) {\n            return (!!obj) && (obj.constructor === Array);\n        }\n\n        /**\n         * Check if value is object literal\n         * @param obj\n         * @returns {boolean}\n         * @private\n         */\n        _isPlainObject (obj) {\n            return (!!obj) && (obj.constructor === Object);\n        }\n\n        /**\n         * Fix websocket protocols based on options\n         * @private\n         */\n        _setWsProtocols () {\n            if (this._options.msgpackCoder) {\n                if (this._options.transportEncoding === 'msgpack') {\n                    this._protocols = ['wamp.2.msgpack', 'wamp.2.json'];\n                } else {\n                    this._protocols = ['wamp.2.json', 'wamp.2.msgpack'];\n                }\n            }\n        }\n\n        /**\n         * Validate uri\n         * @param {string} uri\n         * @returns {boolean}\n         * @private\n         */\n        _validateURI (uri) {\n            const re = /^([0-9a-zA-Z_]{2,}\\.)*([0-9a-zA-Z_]{2,})$/;\n            if (!re.test(uri) || uri.indexOf('wamp') === 0) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n\n        /**\n         * Encode WAMP message\n         * @param {Array} msg\n         * @returns {*}\n         * @private\n         */\n        _encode (msg) {\n\n            if (this._options.transportEncoding === 'msgpack' && this._options.msgpackCoder) {\n                try {\n                    return this._options.msgpackCoder.encode(msg);\n                } catch (e) {\n                    throw new Error('[wampy] msgpack encode exception!');\n                }\n            } else {\n                return JSON.stringify(msg);\n            }\n        }\n\n        /**\n         * Decode WAMP message\n         * @param  msg\n         * @returns {array}\n         * @private\n         */\n        _decode (msg) {\n            if (this._options.transportEncoding === 'msgpack' && this._options.msgpackCoder) {\n                try {\n                    return this._options.msgpackCoder.decode(new Uint8Array(msg));\n                } catch (e) {\n                    throw new Error('[wampy] msgpack decode exception!');\n                }\n            } else {\n                return JSON.parse(msg);\n            }\n        }\n\n        /**\n         * Send encoded message to server\n         * @param {Array} msg\n         * @private\n         */\n        _send (msg) {\n            if (msg) {\n                this._wsQueue.push(this._encode(msg));\n            }\n\n            if (this._ws && this._ws.readyState === 1 && this._cache.sessionId) {\n                while (this._wsQueue.length) {\n                    this._ws.send(this._wsQueue.shift());\n                }\n            }\n        }\n\n        /**\n         * Reset internal state and cache\n         * @private\n         */\n        _resetState () {\n            this._wsQueue = [];\n            this._subscriptions = {};\n            this._subsTopics = new Set();\n            this._requests = {};\n            this._calls = {};\n            this._rpcRegs = {};\n            this._rpcNames = new Set();\n\n            // Just keep attrs that are have to be present\n            this._cache = {\n                reconnectingAttempts: 0\n            };\n        }\n\n        /**\n         * Initialize internal websocket callbacks\n         * @private\n         */\n        _initWsCallbacks () {\n            if (this._ws) {\n                this._ws.onopen = () => { this._wsOnOpen(); };\n                this._ws.onclose = event => { this._wsOnClose(event); };\n                this._ws.onmessage = event => { this._wsOnMessage(event); };\n                this._ws.onerror = error => { this._wsOnError(error); };\n            }\n        }\n\n        _wsOnOpen () {\n            const options = this._merge(this._options.helloCustomDetails, this._wamp_features);\n\n            if (this._options.authid) {\n                options.authmethods = this._authmethods;\n                options.authid = this._options.authid;\n            }\n\n            this._log('[wampy] websocket connected');\n\n            if (this._ws.protocol) {\n                this._options.transportEncoding = this._ws.protocol.split('.')[2];\n            }\n\n            if (this._options.transportEncoding === 'msgpack') {\n                this._ws.binaryType = 'arraybuffer';\n            }\n\n            // WAMP SPEC: [HELLO, Realm|uri, Details|dict]\n            // Sending directly 'cause it's a hello msg and no sessionId check is needed\n            this._ws.send(this._encode([WAMP_MSG_SPEC.HELLO, this._options.realm, options]));\n        }\n\n        _wsOnClose () {\n            const root = isNode ? global : window;\n            this._log('[wampy] websocket disconnected');\n\n            // Automatic reconnection\n            if ((this._cache.sessionId || this._cache.reconnectingAttempts) &&\n                this._options.autoReconnect && this._cache.reconnectingAttempts < this._options.maxRetries &&\n                !this._cache.isSayingGoodbye) {\n                this._cache.sessionId = null;\n                this._cache.timer = root.setTimeout(() => { this._wsReconnect(); }, this._options.reconnectInterval);\n            } else {\n                // No reconnection needed or reached max retries count\n                if (this._options.onClose) {\n                    this._options.onClose();\n                }\n\n                this._resetState();\n                this._ws = null;\n            }\n        }\n\n        _wsOnMessage (event) {\n            let data, id, i, msg, p;\n\n            this._log('[wampy] websocket message received', event.data);\n\n            data = this._decode(event.data);\n\n            switch (data[0]) {\n                case WAMP_MSG_SPEC.WELCOME:\n                    // WAMP SPEC: [WELCOME, Session|id, Details|dict]\n\n                    this._cache.sessionId = data[1];\n                    this._cache.server_wamp_features = data[2];\n\n                    if (this._cache.reconnectingAttempts) {\n                        // There was reconnection\n\n                        this._cache.reconnectingAttempts = 0;\n\n                        if (this._options.onReconnectSuccess) {\n                            this._options.onReconnectSuccess();\n                        }\n\n                        // Let's renew all previous state\n                        this._renewSubscriptions();\n                        this._renewRegistrations();\n\n                    } else {\n                        // Firing onConnect event on real connection to WAMP server\n                        if (this._options.onConnect) {\n                            this._options.onConnect();\n                        }\n                    }\n\n                    // Send local queue if there is something out there\n                    this._send();\n\n                    break;\n                case WAMP_MSG_SPEC.ABORT:\n                    // WAMP SPEC: [ABORT, Details|dict, Reason|uri]\n                    if (this._options.onError) {\n                        this._options.onError(data[1].message ? data[1].message : data[2]);\n                    }\n                    this._ws.close();\n                    break;\n                case WAMP_MSG_SPEC.CHALLENGE:\n                    // WAMP SPEC: [CHALLENGE, AuthMethod|string, Extra|dict]\n\n                    if (this._options.authid && typeof this._options.onChallenge === 'function') {\n\n                        p = new Promise((resolve, reject) => {\n                            resolve(this._options.onChallenge(data[1], data[2]));\n                        });\n\n                        p.then((key) => {\n\n                            // Sending directly 'cause it's a challenge msg and no sessionId check is needed\n                            this._ws.send(this._encode([WAMP_MSG_SPEC.AUTHENTICATE, key, {}]));\n\n                        }).catch(e => {\n                            this._ws.send(this._encode([\n                                WAMP_MSG_SPEC.ABORT,\n                                { message: 'Exception in onChallenge handler raised!' },\n                                'wamp.error.cannot_authenticate'\n                            ]));\n                            if (this._options.onError) {\n                                this._options.onError(WAMP_ERROR_MSG.CRA_EXCEPTION.description);\n                            }\n                            this._ws.close();\n                            this._cache.opStatus = WAMP_ERROR_MSG.CRA_EXCEPTION;\n                        });\n\n                    } else {\n\n                        this._ws.send(this._encode([\n                            WAMP_MSG_SPEC.ABORT,\n                            { message: WAMP_ERROR_MSG.NO_CRA_CB_OR_ID.description },\n                            'wamp.error.cannot_authenticate'\n                        ]));\n                        if (this._options.onError) {\n                            this._options.onError(WAMP_ERROR_MSG.NO_CRA_CB_OR_ID.description);\n                        }\n                        this._ws.close();\n                        this._cache.opStatus = WAMP_ERROR_MSG.NO_CRA_CB_OR_ID;\n\n                    }\n                    break;\n                case WAMP_MSG_SPEC.GOODBYE:\n                    // WAMP SPEC: [GOODBYE, Details|dict, Reason|uri]\n                    if (!this._cache.isSayingGoodbye) {    // get goodbye, initiated by server\n                        this._cache.isSayingGoodbye = true;\n                        this._send([WAMP_MSG_SPEC.GOODBYE, {}, 'wamp.error.goodbye_and_out']);\n                    }\n                    this._cache.sessionId = null;\n                    this._ws.close();\n                    break;\n                case WAMP_MSG_SPEC.ERROR:\n                    // WAMP SPEC: [ERROR, REQUEST.Type|int, REQUEST.Request|id, Details|dict,\n                    //             Error|uri, (Arguments|list, ArgumentsKw|dict)]\n                    switch (data[1]) {\n                        case WAMP_MSG_SPEC.SUBSCRIBE:\n                        case WAMP_MSG_SPEC.UNSUBSCRIBE:\n                            if (this._requests[data[2]]) {\n\n                                if (this._requests[data[2]].callbacks.onError) {\n                                    this._requests[data[2]].callbacks.onError(data[4], data[3]);\n                                }\n\n                                delete this._requests[data[2]];\n\n                            }\n                            break;\n                        case WAMP_MSG_SPEC.PUBLISH:\n                            if (this._requests[data[2]]) {\n\n                                if (this._requests[data[2]].callbacks.onError) {\n                                    this._requests[data[2]].callbacks.onError(data[4], data[3]);\n                                }\n\n                                delete this._requests[data[2]];\n\n                            }\n                            break;\n                        case WAMP_MSG_SPEC.REGISTER:\n                        case WAMP_MSG_SPEC.UNREGISTER:\n                            // WAMP SPEC: [ERROR, REGISTER, REGISTER.Request|id, Details|dict, Error|uri]\n                            if (this._requests[data[2]]) {\n\n                                if (this._requests[data[2]].callbacks.onError) {\n                                    this._requests[data[2]].callbacks.onError(data[4], data[3]);\n                                }\n\n                                delete this._requests[data[2]];\n\n                            }\n                            break;\n                        case WAMP_MSG_SPEC.INVOCATION:\n                            break;\n                        case WAMP_MSG_SPEC.CALL:\n                            if (this._calls[data[2]]) {\n\n                                if (this._calls[data[2]].onError) {\n                                    // WAMP SPEC: [ERROR, CALL, CALL.Request|id, Details|dict,\n                                    //             Error|uri, Arguments|list, ArgumentsKw|dict]\n                                    this._calls[data[2]].onError(data[4], data[3], data[5], data[6]);\n                                }\n\n                                delete this._calls[data[2]];\n\n                            }\n                            break;\n                    }\n                    break;\n                case WAMP_MSG_SPEC.SUBSCRIBED:\n                    // WAMP SPEC: [SUBSCRIBED, SUBSCRIBE.Request|id, Subscription|id]\n                    if (this._requests[data[1]]) {\n                        this._subscriptions[this._requests[data[1]].topic] = this._subscriptions[data[2]] = {\n                            id: data[2],\n                            callbacks: [this._requests[data[1]].callbacks.onEvent]\n                        };\n\n                        this._subsTopics.add(this._requests[data[1]].topic);\n\n                        if (this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess();\n                        }\n\n                        delete this._requests[data[1]];\n\n                    }\n                    break;\n                case WAMP_MSG_SPEC.UNSUBSCRIBED:\n                    // WAMP SPEC: [UNSUBSCRIBED, UNSUBSCRIBE.Request|id]\n                    if (this._requests[data[1]]) {\n                        id = this._subscriptions[this._requests[data[1]].topic].id;\n                        delete this._subscriptions[this._requests[data[1]].topic];\n                        delete this._subscriptions[id];\n\n                        if (this._subsTopics.has(this._requests[data[1]].topic)) {\n                            this._subsTopics.delete(this._requests[data[1]].topic);\n                        }\n\n                        if (this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess();\n                        }\n\n                        delete this._requests[data[1]];\n                    }\n                    break;\n                case WAMP_MSG_SPEC.PUBLISHED:\n                    // WAMP SPEC: [PUBLISHED, PUBLISH.Request|id, Publication|id]\n                    if (this._requests[data[1]]) {\n                        if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess();\n                        }\n\n                        delete this._requests[data[1]];\n\n                    }\n                    break;\n                case WAMP_MSG_SPEC.EVENT:\n                    if (this._subscriptions[data[1]]) {\n\n                        // WAMP SPEC: [EVENT, SUBSCRIBED.Subscription|id, PUBLISHED.Publication|id,\n                        //             Details|dict, PUBLISH.Arguments|list, PUBLISH.ArgumentKw|dict]\n\n                        i = this._subscriptions[data[1]].callbacks.length;\n                        while (i--) {\n                            this._subscriptions[data[1]].callbacks[i](data[4], data[5]);\n                        }\n\n                    }\n                    break;\n                case WAMP_MSG_SPEC.RESULT:\n                    if (this._calls[data[1]]) {\n\n                        // WAMP SPEC: [RESULT, CALL.Request|id, Details|dict,\n                        //             YIELD.Arguments|list, YIELD.ArgumentsKw|dict]\n\n                        this._calls[data[1]].onSuccess(data[3], data[4]);\n                        if (!(data[2].progress && data[2].progress === true)) {\n                            // We receive final result (progressive or not)\n                            delete this._calls[data[1]];\n                        }\n\n                    }\n                    break;\n                case WAMP_MSG_SPEC.REGISTER:\n                    // WAMP SPEC:\n                    break;\n                case WAMP_MSG_SPEC.REGISTERED:\n                    // WAMP SPEC: [REGISTERED, REGISTER.Request|id, Registration|id]\n                    if (this._requests[data[1]]) {\n                        this._rpcRegs[this._requests[data[1]].topic] = this._rpcRegs[data[2]] = {\n                            id: data[2],\n                            callbacks: [this._requests[data[1]].callbacks.rpc]\n                        };\n\n                        this._rpcNames.add(this._requests[data[1]].topic);\n\n                        if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess();\n                        }\n\n                        delete this._requests[data[1]];\n\n                    }\n                    break;\n                case WAMP_MSG_SPEC.UNREGISTER:\n                    // WAMP SPEC:\n                    break;\n                case WAMP_MSG_SPEC.UNREGISTERED:\n                    // WAMP SPEC: [UNREGISTERED, UNREGISTER.Request|id]\n                    if (this._requests[data[1]]) {\n                        id = this._rpcRegs[this._requests[data[1]].topic].id;\n                        delete this._rpcRegs[this._requests[data[1]].topic];\n                        delete this._rpcRegs[id];\n\n                        if (this._rpcNames.has(this._requests[data[1]].topic)) {\n                            this._rpcNames.delete(this._requests[data[1]].topic);\n                        }\n\n                        if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess();\n                        }\n\n                        delete this._requests[data[1]];\n                    }\n                    break;\n                case WAMP_MSG_SPEC.INVOCATION:\n                    if (this._rpcRegs[data[2]]) {\n\n                        // WAMP SPEC: [INVOCATION, Request|id, REGISTERED.Registration|id,\n                        //             Details|dict, CALL.Arguments|list, CALL.ArgumentsKw|dict]\n\n                        p = new Promise((resolve, reject) => {\n                            resolve(this._rpcRegs[data[2]].callbacks[0](data[4], data[5], data[3]));\n                        });\n\n                        p.then((results) => {\n                            // WAMP SPEC: [YIELD, INVOCATION.Request|id, Options|dict, (Arguments|list, ArgumentsKw|dict)]\n                            if (results) {\n                                if (this._isArray(results[1])) {\n                                    msg = [WAMP_MSG_SPEC.YIELD, data[1], results[0], results[1]];\n                                } else if (this._isPlainObject(results[1])) {\n                                    msg = [WAMP_MSG_SPEC.YIELD, data[1], results[0], [], results[1]];\n                                } else if (typeof (results[1]) === 'undefined') {\n                                    msg = [WAMP_MSG_SPEC.YIELD, data[1], results[0]];\n                                } else {    // single value\n                                    msg = [WAMP_MSG_SPEC.YIELD, data[1], results[0], [results[1]]];\n                                }\n                            } else {\n                                msg = [WAMP_MSG_SPEC.YIELD, data[1], {}];\n                            }\n                            this._send(msg);\n\n                        }).catch(e => {\n                            this._send([WAMP_MSG_SPEC.ERROR, WAMP_MSG_SPEC.INVOCATION,\n                                        data[1], {}, 'wamp.error.invocation_exception']);\n                        });\n\n                    } else {\n                        // WAMP SPEC: [ERROR, INVOCATION, INVOCATION.Request|id, Details|dict, Error|uri]\n                        this._send([WAMP_MSG_SPEC.ERROR, WAMP_MSG_SPEC.INVOCATION,\n                                    data[1], {}, 'wamp.error.no_such_procedure']);\n                        this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_INVOCATION;\n                    }\n\n                    break;\n                case WAMP_MSG_SPEC.INTERRUPT:\n                    // WAMP SPEC:\n                    break;\n                case WAMP_MSG_SPEC.YIELD:\n                    // WAMP SPEC:\n                    break;\n            }\n        }\n\n        _wsOnError (error) {\n            this._log('[wampy] websocket error');\n\n            if (this._options.onError) {\n                this._options.onError(error);\n            }\n        }\n\n        _wsReconnect () {\n            this._log('[wampy] websocket reconnecting...');\n\n            if (this._options.onReconnect) {\n                this._options.onReconnect();\n            }\n\n            this._cache.reconnectingAttempts++;\n            this._ws = getWebSocket(this._url, this._protocols, this._options.ws);\n            this._initWsCallbacks();\n        }\n\n        _renewSubscriptions () {\n            let subs = this._subscriptions,\n                st = this._subsTopics,\n                i;\n\n            this._subscriptions = {};\n            this._subsTopics = new Set();\n\n            for (let topic of st) {\n                i = subs[topic].callbacks.length;\n                while (i--) {\n                    this.subscribe(topic, subs[topic].callbacks[i]);\n                }\n            }\n        }\n\n        _renewRegistrations () {\n            let rpcs = this._rpcRegs,\n                rn = this._rpcNames;\n\n            this._rpcRegs = {};\n            this._rpcNames = new Set();\n\n            for (let rpcName of rn) {\n                this.register(rpcName, { rpc: rpcs[rpcName].callbacks[0] });\n            }\n        }\n\n        /* Wampy public API */\n\n        /**\n         * Get or set Wampy options\n         *\n         * To get options - call without parameters\n         * To set options - pass hash-table with options values\n         *\n         * @param {object} opts\n         * @returns {*}\n         */\n        options (opts) {\n            if (typeof (opts) === 'undefined') {\n                return this._options;\n            } else if (this._isPlainObject(opts)) {\n                this._options = this._merge(this._options, opts);\n                return this;\n            }\n        }\n\n        /**\n         * Get the status of last operation\n         *\n         * @returns {code, description}\n         *      code: 0 - if operation was successful\n         *      code > 0 - if error occurred\n         *      description contains details about error\n         *      reqId: last send request ID\n         */\n        getOpStatus () {\n            return this._cache.opStatus;\n        }\n\n        /**\n         * Get the WAMP Session ID\n         *\n         * @returns {string} Session ID\n         */\n        getSessionId () {\n            return this._cache.sessionId;\n        }\n\n        /**\n         * Connect to server\n         * @param {string} url New url (optional)\n         * @returns {Wampy}\n         */\n        connect (url) {\n            if (url) {\n                this._url = url;\n            }\n\n            if (this._options.realm) {\n\n                if ((!this._options.authid && typeof this._options.onChallenge === 'function') ||\n                    (this._options.authid && typeof this._options.onChallenge !== 'function')) {\n                    this._cache.opStatus = WAMP_ERROR_MSG.NO_CRA_CB_OR_ID;\n                    return this;\n                }\n\n                this._setWsProtocols();\n                this._ws = getWebSocket(this._url, this._protocols, this._options.ws);\n                if (!this._ws) {\n                    this._cache.opStatus = WAMP_ERROR_MSG.NO_WS_OR_URL;\n                    return this;\n                }\n                this._initWsCallbacks();\n\n            } else {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_REALM;\n            }\n\n            return this;\n        }\n\n        /**\n         * Disconnect from server\n         * @returns {Wampy}\n         */\n        disconnect () {\n            if (this._cache.sessionId) {\n                // need to send goodbye message to server\n                this._cache.isSayingGoodbye = true;\n                this._send([WAMP_MSG_SPEC.GOODBYE, {}, 'wamp.error.system_shutdown']);\n            } else if (this._ws) {\n                this._ws.close();\n            }\n\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n\n            return this;\n        }\n\n        /**\n         * Abort WAMP session establishment\n         *\n         * @returns {Wampy}\n         */\n        abort () {\n\n            if (!this._cache.sessionId && this._ws.readyState === 1) {\n                this._send([WAMP_MSG_SPEC.ABORT, {}, 'wamp.error.abort']);\n                this._cache.sessionId = null;\n            }\n\n            this._ws.close();\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n\n            return this;\n        }\n\n        /**\n         * Subscribe to a topic on a broker\n         *\n         * @param {string} topicURI\n         * @param {function|object} callbacks - if it is a function - it will be treated as published event callback\n         *                          or it can be hash table of callbacks:\n         *                          { onSuccess: will be called when subscribe would be confirmed\n         *                            onError: will be called if subscribe would be aborted\n         *                            onEvent: will be called on receiving published event }\n         *\n         * @returns {Wampy}\n         */\n        subscribe (topicURI, callbacks) {\n            let reqId;\n\n            if (this._cache.sessionId && !this._cache.server_wamp_features.roles.broker) {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_BROKER;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (!this._validateURI(topicURI)) {\n                this._cache.opStatus = WAMP_ERROR_MSG.URI_ERROR;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (typeof callbacks === 'function') {\n                callbacks = { onEvent: callbacks };\n            } else if (!this._isPlainObject(callbacks) || typeof (callbacks.onEvent) === 'undefined') {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (!this._subscriptions[topicURI] || !this._subscriptions[topicURI].callbacks.length) {\n                // no such subscription or processing unsubscribing\n\n                reqId = this._getReqId();\n\n                this._requests[reqId] = {\n                    topic: topicURI,\n                    callbacks: callbacks\n                };\n\n                // WAMP SPEC: [SUBSCRIBE, Request|id, Options|dict, Topic|uri]\n                this._send([WAMP_MSG_SPEC.SUBSCRIBE, reqId, {}, topicURI]);\n\n            } else {    // already have subscription to this topic\n                // There is no such callback yet\n                if (this._subscriptions[topicURI].callbacks.indexOf(callbacks.onEvent) < 0) {\n                    this._subscriptions[topicURI].callbacks.push(callbacks.onEvent);\n                }\n\n                if (callbacks.onSuccess) {\n                    callbacks.onSuccess();\n                }\n            }\n\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n            return this;\n        }\n\n        /**\n         * Unsubscribe from topic\n         * @param {string} topicURI\n         * @param {function|object} callbacks - if it is a function - it will be treated as\n         *                          published event callback to remove or it can be hash table of callbacks:\n         *                          { onSuccess: will be called when unsubscribe would be confirmed\n         *                            onError: will be called if unsubscribe would be aborted\n         *                            onEvent: published event callback to remove }\n         * @returns {Wampy}\n         */\n        unsubscribe (topicURI, callbacks) {\n            let reqId, i = -1;\n\n            if (this._cache.sessionId && !this._cache.server_wamp_features.roles.broker) {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_BROKER;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (this._subscriptions[topicURI]) {\n\n                reqId = this._getReqId();\n\n                if (typeof (callbacks) === 'undefined') {\n                    this._subscriptions[topicURI].callbacks = [];\n                    callbacks = {};\n                } else if (typeof callbacks === 'function') {\n                    i = this._subscriptions[topicURI].callbacks.indexOf(callbacks);\n                    callbacks = {};\n                } else if (callbacks.onEvent && typeof callbacks.onEvent === 'function') {\n                    i = this._subscriptions[topicURI].callbacks.indexOf(callbacks.onEvent);\n                } else {\n                    this._subscriptions[topicURI].callbacks = [];\n                }\n\n                if (i >= 0) {\n                    this._subscriptions[topicURI].callbacks.splice(i, 1);\n                }\n\n                if (this._subscriptions[topicURI].callbacks.length) {\n                    // There are another callbacks for this topic\n                    this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n                    return this;\n                }\n\n                this._requests[reqId] = {\n                    topic: topicURI,\n                    callbacks: callbacks\n                };\n\n                // WAMP_SPEC: [UNSUBSCRIBE, Request|id, SUBSCRIBED.Subscription|id]\n                this._send([WAMP_MSG_SPEC.UNSUBSCRIBE, reqId, this._subscriptions[topicURI].id]);\n\n            } else {\n                this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_UNSUBSCRIBE;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n            return this;\n        }\n\n        /**\n         * Publish a event to topic\n         * @param {string} topicURI\n         * @param {string|number|Array|object} payload - optional parameter.\n         * @param {object} callbacks - optional hash table of callbacks:\n         *                          { onSuccess: will be called when publishing would be confirmed\n         *                            onError: will be called if publishing would be aborted }\n         * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n         *                          { exclude: integer|array WAMP session id(s) that won't receive a published event,\n         *                                      even though they may be subscribed\n         *                            exclude_authid: string|array Authentication id(s) that won't receive\n         *                                      a published event, even though they may be subscribed\n         *                            exclude_authrole: string|array Authentication role(s) that won't receive\n         *                                      a published event, even though they may be subscribed\n         *                            eligible: integer|array WAMP session id(s) that are allowed\n         *                                      to receive a published event\n         *                            eligible_authid: string|array Authentication id(s) that are allowed\n         *                                      to receive a published event\n         *                            eligible_authrole: string|array Authentication role(s) that are allowed\n         *                                      to receive a published event\n         *                            exclude_me: bool flag of receiving publishing event by initiator\n         *                            disclose_me: bool flag of disclosure of publisher identity (its WAMP session ID)\n         *                                      to receivers of a published event }\n         * @returns {Wampy}\n         */\n        publish (topicURI, payload, callbacks, advancedOptions) {\n            let reqId, msg, options = {}, err = false;\n\n            if (this._cache.sessionId && !this._cache.server_wamp_features.roles.broker) {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_BROKER;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (!this._validateURI(topicURI)) {\n                this._cache.opStatus = WAMP_ERROR_MSG.URI_ERROR;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (this._isPlainObject(callbacks)) {\n                options.acknowledge = true;\n            }\n\n            if (typeof (advancedOptions) !== 'undefined') {\n\n                if (this._isPlainObject(advancedOptions)) {\n                    if (advancedOptions.exclude) {\n                        if (this._isArray(advancedOptions.exclude) && advancedOptions.exclude.length) {\n                            options.exclude = advancedOptions.exclude;\n                        } else if (typeof advancedOptions.exclude === 'number') {\n                            options.exclude = [advancedOptions.exclude];\n                        } else {\n                            err = true;\n                        }\n                    }\n\n                    if (advancedOptions.exclude_authid) {\n                        if (this._isArray(advancedOptions.exclude_authid) && advancedOptions.exclude_authid.length) {\n                            options.exclude_authid = advancedOptions.exclude_authid;\n                        } else if (typeof advancedOptions.exclude_authid === 'string') {\n                            options.exclude_authid = [advancedOptions.exclude_authid];\n                        } else {\n                            err = true;\n                        }\n                    }\n\n                    if (advancedOptions.exclude_authrole) {\n                        if (this._isArray(advancedOptions.exclude_authrole) && advancedOptions.exclude_authrole.length) {\n                            options.exclude_authrole = advancedOptions.exclude_authrole;\n                        } else if (typeof advancedOptions.exclude_authrole === 'string') {\n                            options.exclude_authrole = [advancedOptions.exclude_authrole];\n                        } else {\n                            err = true;\n                        }\n                    }\n\n                    if (advancedOptions.eligible) {\n                        if (this._isArray(advancedOptions.eligible) && advancedOptions.eligible.length) {\n                            options.eligible = advancedOptions.eligible;\n                        } else if (typeof advancedOptions.eligible === 'number') {\n                            options.eligible = [advancedOptions.eligible];\n                        } else {\n                            err = true;\n                        }\n                    }\n\n                    if (advancedOptions.eligible_authid) {\n                        if (this._isArray(advancedOptions.eligible_authid) && advancedOptions.eligible_authid.length) {\n                            options.eligible_authid = advancedOptions.eligible_authid;\n                        } else if (typeof advancedOptions.eligible_authid === 'string') {\n                            options.eligible_authid = [advancedOptions.eligible_authid];\n                        } else {\n                            err = true;\n                        }\n                    }\n\n                    if (advancedOptions.eligible_authrole) {\n                        if (this._isArray(advancedOptions.eligible_authrole) && advancedOptions.eligible_authrole.length) {\n                            options.eligible_authrole = advancedOptions.eligible_authrole;\n                        } else if (typeof advancedOptions.eligible_authrole === 'string') {\n                            options.eligible_authrole = [advancedOptions.eligible_authrole];\n                        } else {\n                            err = true;\n                        }\n                    }\n\n                    if (advancedOptions.hasOwnProperty('exclude_me')) {\n                        options.exclude_me = advancedOptions.exclude_me !== false;\n                    }\n\n                    if (advancedOptions.hasOwnProperty('disclose_me')) {\n                        options.disclose_me = advancedOptions.disclose_me === true;\n                    }\n\n                } else {\n                    err = true;\n                }\n\n                if (err) {\n                    this._cache.opStatus = WAMP_ERROR_MSG.INVALID_PARAM;\n\n                    if (this._isPlainObject(callbacks) && callbacks.onError) {\n                        callbacks.onError(this._cache.opStatus.description);\n                    }\n\n                    return this;\n                }\n            }\n\n            reqId = this._getReqId();\n\n            switch (arguments.length) {\n                case 1:\n                    // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri]\n                    msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI];\n                    break;\n                case 2:\n                    // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri, Arguments|list (, ArgumentsKw|dict)]\n                    if (this._isArray(payload)) {\n                        msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, payload];\n                    } else if (this._isPlainObject(payload)) {\n                        msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, [], payload];\n                    } else {    // assume it's a single value\n                        msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, [payload]];\n                    }\n                    break;\n                default:\n                    this._requests[reqId] = {\n                        topic: topicURI,\n                        callbacks: callbacks\n                    };\n\n                    // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri, Arguments|list (, ArgumentsKw|dict)]\n                    if (this._isArray(payload)) {\n                        msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, payload];\n                    } else if (this._isPlainObject(payload)) {\n                        msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, [], payload];\n                    } else {    // assume it's a single value\n                        msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, [payload]];\n                    }\n                    break;\n            }\n\n            this._send(msg);\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n            return this;\n        }\n\n        /**\n         * Remote Procedure Call\n         * @param {string} topicURI\n         * @param {string|number|Array|object} payload - can be either a value of any type or null\n         * @param {function|object} callbacks - if it is a function - it will be treated as result callback function\n         *                          or it can be hash table of callbacks:\n         *                          { onSuccess: will be called with result on successful call\n         *                            onError: will be called if invocation would be aborted }\n         * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n         *                          { disclose_me: bool flag of disclosure of Caller identity (WAMP session ID)\n         *                                  to endpoints of a routed call\n         *                            receive_progress: bool flag for receiving progressive results. In this case\n         *                                  onSuccess function will be called every time on receiving result\n         *                            timeout: integer timeout (in ms) for the call to finish }\n         * @returns {Wampy}\n         */\n        call (topicURI, payload, callbacks, advancedOptions) {\n            let reqId, msg, options = {}, err = false;\n\n            if (this._cache.sessionId && !this._cache.server_wamp_features.roles.dealer) {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_DEALER;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (!this._validateURI(topicURI)) {\n                this._cache.opStatus = WAMP_ERROR_MSG.URI_ERROR;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (typeof callbacks === 'function') {\n                callbacks = { onSuccess: callbacks };\n            } else if (!this._isPlainObject(callbacks) || typeof (callbacks.onSuccess) === 'undefined') {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (typeof (advancedOptions) !== 'undefined') {\n\n                if (this._isPlainObject(advancedOptions)) {\n                    if (advancedOptions.hasOwnProperty('disclose_me')) {\n                        options.disclose_me = advancedOptions.disclose_me === true;\n                    }\n\n                    if (advancedOptions.hasOwnProperty('receive_progress')) {\n                        options.receive_progress = advancedOptions.receive_progress === true;\n                    }\n\n                    if (advancedOptions.hasOwnProperty('timeout')) {\n                        if (typeof advancedOptions.timeout === 'number') {\n                            options.timeout = advancedOptions.timeout;\n                        } else {\n                            err = true;\n                        }\n                    }\n\n                } else {\n                    err = true;\n                }\n\n                if (err) {\n                    this._cache.opStatus = WAMP_ERROR_MSG.INVALID_PARAM;\n\n                    if (this._isPlainObject(callbacks) && callbacks.onError) {\n                        callbacks.onError(this._cache.opStatus.description);\n                    }\n\n                    return this;\n                }\n            }\n\n            do {\n                reqId = this._getReqId();\n            } while (reqId in this._calls);\n\n            this._calls[reqId] = callbacks;\n\n            // WAMP SPEC: [CALL, Request|id, Options|dict, Procedure|uri, (Arguments|list, ArgumentsKw|dict)]\n            if (payload === null) {\n                msg = [WAMP_MSG_SPEC.CALL, reqId, options, topicURI];\n            } else {\n                if (this._isArray(payload)) {\n                    msg = [WAMP_MSG_SPEC.CALL, reqId, options, topicURI, payload];\n                } else if (this._isPlainObject(payload)) {\n                    msg = [WAMP_MSG_SPEC.CALL, reqId, options, topicURI, [], payload];\n                } else {    // assume it's a single value\n                    msg = [WAMP_MSG_SPEC.CALL, reqId, options, topicURI, [payload]];\n                }\n            }\n\n            this._send(msg);\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n            return this;\n        }\n\n        /**\n         * RPC invocation cancelling\n         *\n         * @param {int} reqId RPC call request ID\n         * @param {function|object} callbacks - if it is a function - it will be called if successfully\n         *                          sent canceling message or it can be hash table of callbacks:\n         *                          { onSuccess: will be called if successfully sent canceling message\n         *                            onError: will be called if some error occurred }\n         * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n         *                          { mode: string|one of the possible modes:\n         *                                  \"skip\" | \"kill\" | \"killnowait\". Skip is default.\n          *                          }\n         *\n         * @returns {Wampy}\n         */\n        cancel (reqId, callbacks, advancedOptions) {\n            let options = { mode: 'skip' };\n\n            if (this._cache.sessionId && !this._cache.server_wamp_features.roles.dealer) {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_DEALER;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (!reqId || !this._calls[reqId]) {\n                this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_REQ_ID;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (typeof (advancedOptions) !== 'undefined') {\n                if (this._isPlainObject(advancedOptions)) {\n                    if (advancedOptions.hasOwnProperty('mode')) {\n                        options.mode = /skip|kill|killnowait/.test(advancedOptions.mode) ? advancedOptions.mode : 'skip' ;\n                    }\n                }\n            }\n\n            // WAMP SPEC: [CANCEL, CALL.Request|id, Options|dict]\n            this._send([WAMP_MSG_SPEC.CANCEL, reqId, options]);\n\n            if (callbacks.onSuccess) {\n                callbacks.onSuccess();\n            }\n\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n            return this;\n\n        }\n\n        /**\n         * RPC registration for invocation\n         * @param {string} topicURI\n         * @param {function|object} callbacks - if it is a function - it will be treated as rpc itself\n         *                          or it can be hash table of callbacks:\n         *                          { rpc: registered procedure\n         *                            onSuccess: will be called on successful registration\n         *                            onError: will be called if registration would be aborted }\n         * @returns {Wampy}\n         */\n        register (topicURI, callbacks) {\n            let reqId;\n\n            if (this._cache.sessionId && !this._cache.server_wamp_features.roles.dealer) {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_DEALER;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (!this._validateURI(topicURI)) {\n                this._cache.opStatus = WAMP_ERROR_MSG.URI_ERROR;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (typeof callbacks === 'function') {\n                callbacks = { rpc: callbacks };\n            } else if (!this._isPlainObject(callbacks) || typeof (callbacks.rpc) === 'undefined') {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (!this._rpcRegs[topicURI] || !this._rpcRegs[topicURI].callbacks.length) {\n                // no such registration or processing unregistering\n\n                reqId = this._getReqId();\n\n                this._requests[reqId] = {\n                    topic: topicURI,\n                    callbacks: callbacks\n                };\n\n                // WAMP SPEC: [REGISTER, Request|id, Options|dict, Procedure|uri]\n                this._send([WAMP_MSG_SPEC.REGISTER, reqId, {}, topicURI]);\n                this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n                this._cache.opStatus.reqId = reqId;\n            } else {    // already have registration with such topicURI\n                this._cache.opStatus = WAMP_ERROR_MSG.RPC_ALREADY_REGISTERED;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n            }\n\n            return this;\n\n        }\n\n        /**\n         * RPC unregistration for invocation\n         * @param {string} topicURI\n         * @param {function|object} callbacks - if it is a function, it will be called on successful unregistration\n         *                          or it can be hash table of callbacks:\n         *                          { onSuccess: will be called on successful unregistration\n         *                            onError: will be called if unregistration would be aborted }\n         * @returns {Wampy}\n         */\n        unregister (topicURI, callbacks) {\n            let reqId;\n\n            if (this._cache.sessionId && !this._cache.server_wamp_features.roles.dealer) {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_DEALER;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (!this._validateURI(topicURI)) {\n                this._cache.opStatus = WAMP_ERROR_MSG.URI_ERROR;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (typeof callbacks === 'function') {\n                callbacks = { onSuccess: callbacks };\n            }\n\n            if (this._rpcRegs[topicURI]) {   // there is such registration\n\n                reqId = this._getReqId();\n\n                this._requests[reqId] = {\n                    topic: topicURI,\n                    callbacks: callbacks\n                };\n\n                // WAMP SPEC: [UNREGISTER, Request|id, REGISTERED.Registration|id]\n                this._send([WAMP_MSG_SPEC.UNREGISTER, reqId, this._rpcRegs[topicURI].id]);\n                this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n                this._cache.opStatus.reqId = reqId;\n            } else {    // there is no registration with such topicURI\n                this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_UNREG;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n            }\n\n            return this;\n        }\n    }\n\n    return Wampy;\n\n}));\n"]}